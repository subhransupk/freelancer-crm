// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i9JkwxpqHzRfTtai9PKqEh
// Component: R_Z9uZYwXx8_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_freelancer_crm.module.css"; // plasmic-import: i9JkwxpqHzRfTtai9PKqEh/projectcss
import sty from "./PlasmicLeadLayout.module.css"; // plasmic-import: R_Z9uZYwXx8_/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: cxZK-zkEvRWb/icon

createPlasmicElementProxy;

export type PlasmicLeadLayout__VariantMembers = {};
export type PlasmicLeadLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeadLayout__VariantsArgs;
export const PlasmicLeadLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicLeadLayout__ArgsType = {};
type ArgPropType = keyof PlasmicLeadLayout__ArgsType;
export const PlasmicLeadLayout__ArgProps = new Array<ArgPropType>();

export type PlasmicLeadLayout__OverridesType = {
  root?: p.Flex<typeof RichLayout>;
  loadingBoundary?: p.Flex<typeof LoadingBoundary>;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  table?: p.Flex<typeof RichTable>;
};

export interface DefaultLeadLayoutProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeadLayout__RenderFunc(props: {
  variants: PlasmicLeadLayout__VariantsArgs;
  args: PlasmicLeadLayout__ArgsType;
  overrides: PlasmicLeadLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    client: usePlasmicDataOp(() => {
      return {
        sourceId: "cqRBMG6qdZN53yLU7xRoZv",
        opId: "f34a3419-b58c-43d5-9c8f-b0cb79e158ac",
        userArgs: {},
        cacheKey: `plasmic.$.f34a3419-b58c-43d5-9c8f-b0cb79e158ac.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      fixSiderbar={false}
      layout={"side"}
      logoElement={null}
      navMenuItems={(() => {
        const __composite = [
          { path: null, name: null },
          { name: null, path: null },
          { path: null, name: null },
          { name: null, path: null }
        ];
        __composite["0"]["path"] = `/dashboard`;
        __composite["0"]["name"] = "Dashboard";
        __composite["1"]["name"] = "Clients";
        __composite["1"]["path"] = `/clients`;
        __composite["2"]["path"] = `/projects`;
        __composite["2"]["name"] = "Projects";
        __composite["3"]["name"] = "Leads";
        __composite["3"]["path"] = `/leads`;
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { customBgColor: null, scheme: null };
        __composite["customBgColor"] = "#010347";
        __composite["scheme"] = "custom";
        return __composite;
      })()}
      title={"Freelancer CRM"}
    >
      <LoadingBoundary
        data-plasmic-name={"loadingBoundary"}
        data-plasmic-override={overrides.loadingBoundary}
        className={classNames("__wab_instance", sty.loadingBoundary)}
        loadingState={
          <ph.DataCtxReader>
            {$ctx => (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <IconIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            )}
          </ph.DataCtxReader>
        }
      >
        <ph.DataCtxReader>
          {$ctx =>
            (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.table),
                data: (() => {
                  try {
                    return $queries.client;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                fields: (() => {
                  const __composite = [
                    {
                      key: "__airtable_id",
                      fieldId: "__airtable_id",
                      isHidden: null
                    },
                    { key: "Name", fieldId: "Name" },
                    { key: "Email", fieldId: "Email" },
                    { key: "Phone number", fieldId: "Phone number" },
                    { key: "Address", fieldId: "Address" },
                    {
                      key: "projects list",
                      fieldId: "projects list",
                      isHidden: null
                    },
                    { key: "running projects", fieldId: "running projects" },
                    {
                      key: "Completed projects",
                      fieldId: "Completed projects",
                      isHidden: null
                    },
                    { key: "Projects", fieldId: "Projects" },
                    {
                      key: "Projects 2",
                      fieldId: "Projects 2",
                      isHidden: null
                    },
                    {}
                  ];
                  __composite["0"]["isHidden"] = true;
                  __composite["5"]["isHidden"] = true;
                  __composite["7"]["isHidden"] = true;
                  __composite["9"]["isHidden"] = true;
                  return __composite;
                })(),
                onRowSelectionChanged: async (...eventArgs: any) => {
                  p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKey",
                    ["table", "selectedRowKey"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRow",
                    ["table", "selectedRow"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRows",
                    ["table", "selectedRows"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKeys",
                    ["table", "selectedRowKeys"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                },
                rowActions: (() => {
                  const __composite = [{ type: null, label: null }];
                  __composite["0"]["type"] = "menu";
                  __composite["0"]["label"] = "View";
                  return __composite;
                })(),
                scopeClassName: sty["table__instance"],
                selectedRowKey: p.generateStateValueProp($state, [
                  "table",
                  "selectedRowKey"
                ]),
                selectedRowKeys: p.generateStateValueProp($state, [
                  "table",
                  "selectedRowKeys"
                ]),
                themeResetClassName: classNames(
                  projectcss.root_reset,
                  projectcss.root_reset_tags,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "selectedRowKey",
                    plasmicStateName: "table.selectedRowKey"
                  },
                  {
                    name: "selectedRow",
                    plasmicStateName: "table.selectedRow"
                  },
                  {
                    name: "selectedRows",
                    plasmicStateName: "table.selectedRows"
                  },
                  {
                    name: "selectedRowKeys",
                    plasmicStateName: "table.selectedRowKeys"
                  }
                ],
                [],
                RichTable_Helpers ?? {},
                child$Props
              );

              return (
                <RichTable
                  data-plasmic-name={"table"}
                  data-plasmic-override={overrides.table}
                  {...child$Props}
                />
              );
            })()
          }
        </ph.DataCtxReader>
      </LoadingBoundary>
    </RichLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "loadingBoundary", "freeBox", "svg", "table"],
  loadingBoundary: ["loadingBoundary", "freeBox", "svg", "table"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
  loadingBoundary: typeof LoadingBoundary;
  freeBox: "div";
  svg: "svg";
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeadLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeadLayout__VariantsArgs;
    args?: PlasmicLeadLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeadLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLeadLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeadLayout__ArgProps,
          internalVariantPropNames: PlasmicLeadLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeadLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeadLayout";
  } else {
    func.displayName = `PlasmicLeadLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLeadLayout = Object.assign(
  // Top-level PlasmicLeadLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicLeadLayout
    internalVariantProps: PlasmicLeadLayout__VariantProps,
    internalArgProps: PlasmicLeadLayout__ArgProps
  }
);

export default PlasmicLeadLayout;
/* prettier-ignore-end */
